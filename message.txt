import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import numpy as np

#data to use from the X_train.csv file
data = pd.read_csv('./X_train.csv')

#retirar colunas que não vão ser usadas 
data = data.drop (columns=['v_x_1', 'v_y_1', 'v_x_2', 'v_y_2', 'v_x_3', 'v_y_3'], inplace=False) 

# Encontrar indices das posições iniciais 
indices_zero = np.where((data['t'] == 0) & ((data['x_1'] != 0.0) | (data['y_1'] != 0.0) |
                        (data['x_2'] != 0.0) | (data['y_2'] != 0.0) |
                        (data['x_3'] != 0.0) | (data['y_3'] != 0.0)))[0]


# Criar as novas colunas e preencher com NaN
data[['x1_0', 'y1_0', 'x2_0', 'y2_0', 'x3_0', 'y3_0']] = np.nan

#Adicionar valores às novas colunas de posições iniciais 
for i in range(len(indices_zero)):  # Incluindo o último índice
    inicio = indices_zero[i]
    fim = indices_zero[i+1] if i < len(indices_zero) - 1 else len(data)  # Ajustando o fim para a última linha
    
    # Verificando se o início é válido
    if inicio >= 0:
        data.loc[inicio:fim-1, ['x1_0', 'y1_0', 'x2_0','y2_0', 'x3_0','y3_0']] = data.loc[inicio, ['x_1', 'y_1', 'x_2', 'y_2', 'x_3', 'y_3']].values
    else:
        print(f"Índice inválido: {inicio}")
        

print(f"size before removing initial positions: {len(data)}")

#Remover posições iniciais
drop_initial_position = data[(data['t'] != 0.0)]


print(f"size after removing initial positions: {len(drop_initial_position)}")


#80% to train, 10% to test, 10% to val... we can try 70% 15% 15% aswell
train, test_val = train_test_split(drop_initial_position, test_size=0.2, random_state=42)
test, val = train_test_split(test_val, test_size=0.5, random_state=42)

print(f"Train set size: {len(train)}")
print(f"Validation set size: {len(val)}")
print(f"Test set size: {len(test)}")

########################### Task 1.1 Ends Here#################################

#Regression é um função que vai prever os valores com base em outros casos analisados
#inputs são regressors/predictors e outputs são responses 

#dados de entrada
entryLabels = ['x1_0', 'y1_0', 'x2_0', 'y2_0', 'x3_0', 'y3_0', 't']

#o que queremos prever 
outputLabels = ['x_1', 'y_1', 'x_2', 'y_2', 'x_3', 'y_3']

entry_train = train[entryLabels]
output_train = train[outputLabels]
entry_test  = test[entryLabels]
output_test = test[outputLabels]
entry_val = val[entryLabels]
output_val = val[outputLabels]

#Pipeline pedida pela prof com standardscaler (padronização dos dados) e linear regression
pipeline = Pipeline([('scaler', StandardScaler()),
             ('linear_regression', LinearRegression())])

pipeline.fit(entry_train, output_train)

output_train_prediction = pipeline.predict(entry_train)
output_val_prediction = pipeline.predict(entry_val)
output_test_prediction = pipeline.predict(entry_test)

mse_train = mean_squared_error(output_train, output_train_prediction)
mse_val = mean_squared_error(output_val, output_val_prediction)
mse_test = mean_squared_error(output_test, output_test_prediction)

#se o MSE do dado de treino for muito menor que o MSE de validação e de treino --> modelo está a sofrer overfitting (modelo ajusta-se demasiado aos dados de treino)
print(f"Train MSE: {mse_train}")
print(f"Validation MSE: {mse_val}")
print(f"Test MSE: {mse_test}")

def plot_y_yhat(y_test,y_pred, plot_title = "plot"):
    labels = ['x_1','y_1','x_2','y_2','x_3','y_3']
    MAX = 498
    if len(y_test) > MAX:
        idx = np.random.choice(len(y_test),MAX, replace=False)
    else:
        idx = np.arange(len(y_test))
    plt.figure(figsize=(10,10))
    for i in range(6):
        x0 = np.min(y_test[idx,i])
        x1 = np.max(y_test[idx,i])
        plt.subplot(3,2,i+1)
        plt.scatter(y_test[idx,i],y_pred[idx,i])
        plt.xlabel('True '+labels[i])
        plt.ylabel('Predicted '+labels[i])
        plt.plot([x0,x1],[x0,x1],color='red')
        plt.axis('square')
    plt.savefig(plot_title+'.pdf')
    plt.show()
    
    
plot_y_yhat(np.array(output_val), output_val_prediction, plot_title="y_yhat_val")
plot_y_yhat(np.array(output_test), output_test_prediction, plot_title="y_yhat_test")